// Code generated by MockGen. DO NOT EDIT.
// Source: definition.go
//
// Generated by this command:
//
//	mockgen -source=definition.go -destination=./mocks/mock_db.go -package=mock_db
//

// Package mock_db is a generated GoMock package.
package mock_db

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// GetPointByReceiptID mocks base method.
func (m *MockDB) GetPointByReceiptID(id string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPointByReceiptID", id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPointByReceiptID indicates an expected call of GetPointByReceiptID.
func (mr *MockDBMockRecorder) GetPointByReceiptID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPointByReceiptID", reflect.TypeOf((*MockDB)(nil).GetPointByReceiptID), id)
}

// SavePoints mocks base method.
func (m *MockDB) SavePoints(id string, points int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePoints", id, points)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePoints indicates an expected call of SavePoints.
func (mr *MockDBMockRecorder) SavePoints(id, points any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePoints", reflect.TypeOf((*MockDB)(nil).SavePoints), id, points)
}
