// Code generated by MockGen. DO NOT EDIT.
// Source: definition.go
//
// Generated by this command:
//
//	mockgen -source=definition.go -destination=./mocks/mock_db.go -package=mock_db
//

// Package mock_db is a generated GoMock package.
package mock_db

import (
	schema "receipt_processor/internal/schema"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// GetPointByID mocks base method.
func (m *MockDB) GetPointByID(id string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPointByID", id)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPointByID indicates an expected call of GetPointByID.
func (mr *MockDBMockRecorder) GetPointByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPointByID", reflect.TypeOf((*MockDB)(nil).GetPointByID), id)
}

// SaveReceipt mocks base method.
func (m *MockDB) SaveReceipt(id string, receipt schema.Receipt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveReceipt", id, receipt)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveReceipt indicates an expected call of SaveReceipt.
func (mr *MockDBMockRecorder) SaveReceipt(id, receipt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveReceipt", reflect.TypeOf((*MockDB)(nil).SaveReceipt), id, receipt)
}
